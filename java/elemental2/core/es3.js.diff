393,402d392
<  * Executes a function when a non-existent method is called on an object.
<  * Mozilla-only.
<  *
<  * @param {Function} fun
<  * @return {*}
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod
<  */
< Object.prototype.__noSuchMethod__ = function(fun) {};
< 
< /**
462,470d451
<  * Removes a watchpoint set with the {@see Object.prototype.watch} method.
<  * Mozilla-only.
<  * @param {string} prop The name of a property of the object.
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch
<  * @return {undefined}
<  */
< Object.prototype.unwatch = function(prop) {};
< 
< /**
479,489d459
<  * Sets a watchpoint method.
<  * Mozilla-only.
<  * @param {string} prop The name of a property of the object.
<  * @param {Function} handler A function to call.
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch
<  * @return {undefined}
<  */
< Object.prototype.watch = function(prop, handler) {};
< 
< 
< /**
560c530
<  * @param {...*} var_args
---
>  * @param {...T} items
566c536
< function Array(var_args) {}
---
> function Array(items) {}
580,582c550,551
<  * @param {...*} var_args
<  * @return {!Array<?>}
<  * @this {*}
---
>  * @param {...T} items
>  * @return {!Array<T>}
586c555
< Array.prototype.concat = function(var_args) {};
---
> Array.prototype.concat = function(items) {};
605,607d573
<  * @this {IArrayLike<T>}
<  * @modifies {this}
<  * @template T
618,620d583
<  * @this {IArrayLike<T>}
<  * @template T
<  * @modifies {this}
629,632c592
<  * @return {THIS} A reference to the original modified array.
<  * @this {THIS}
<  * @template THIS
<  * @modifies {this}
---
>  * @return {Array<T>} A reference to the original modified array.
641,642d600
<  * @this {IArrayLike<T>}
<  * @modifies {this}
644d601
<  * @template T
652c609
<  * @param {*=} opt_begin Zero-based index at which to begin extraction.  A
---
>  * @param {number=} opt_begin Zero-based index at which to begin extraction.  A
654c611
<  * @param {*=} opt_end Zero-based index at which to end extraction.  slice
---
>  * @param {number=} opt_end Zero-based index at which to end extraction.  slice
657,658d613
<  * @this {IArrayLike<T>|string}
<  * @template T
669,671d623
<  * @this {IArrayLike<T>}
<  * @template T
<  * @modifies {this}
681c633
<  * @param {*=} opt_index Index at which to start changing the array. If negative,
---
>  * @param {number=} opt_index Index at which to start changing the array. If negative,
684c636
<  * @param {*=} opt_howMany An integer indicating the number of old array elements
---
>  * @param {number=} opt_howMany An integer indicating the number of old array elements
688,690d639
<  * @this {IArrayLike<T>}
<  * @modifies {this}
<  * @template T
715c664
<  * @param {...*} var_args
---
>  * @param {...T} var_args
730,731c679
<  * @this {IArrayLike<T>|string}
<  * @template T,R
---
>  * @template R
743,744c691
<  * @this {IArrayLike<T>|string}
<  * @template T,R
---
>  * @template R
751,752c698,699
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
754,755d700
<  * @this {IArrayLike<T>|string}
<  * @template T,S
762,763c707,708
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
765,766d709
<  * @this {IArrayLike<T>|string}
<  * @template T,S
773,776c716,717
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
<  * @this {IArrayLike<T>|string}
<  * @template T,S
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
787d727
<  * @this {IArrayLike<T>|string}
789d728
<  * @template T
799d737
<  * @this {IArrayLike<T>|string}
801d738
<  * @template T
808,809c745,746
<  * @param {?function(this:S, T, number, !Array<T>): R} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): R} callback
>  * @param {*=} opt_thisobj
811,812c748
<  * @this {IArrayLike<T>|string}
<  * @template T,S,R
---
>  * @template R
819,820c755,756
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function( T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
822,823d757
<  * @this {IArrayLike<T>|string}
<  * @template T,S
847,915d780
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {boolean}
<  * @template T,S
<  */
< Array.every = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {!Array<T>}
<  * @template T,S
<  */
< Array.filter = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @template T,S
<  * @return {undefined}
<  */
< Array.forEach = function(arr, callback, opt_context) {};
< 
< /**
<  * Mozilla 1.6+ only.
<  * @param {IArrayLike<T>} arr
<  * @param {T} obj
<  * @param {number=} opt_fromIndex
<  * @return {number}
<  * @template T
<  * @nosideeffects
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
<  */
< Array.indexOf = function(arr, obj, opt_fromIndex) {};
< 
< /**
<  * Mozilla 1.6+ only.
<  * @param {IArrayLike<T>} arr
<  * @param {T} obj
<  * @param {number=} opt_fromIndex
<  * @return {number}
<  * @template T
<  * @nosideeffects
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf
<  */
< Array.lastIndexOf = function(arr, obj, opt_fromIndex) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, !Array<T>): R} callback
<  * @param {S=} opt_context
<  * @return {!Array<R>}
<  * @template T,S,R
<  */
< Array.map = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {boolean}
<  * @template T,S
<  */
< Array.some = function(arr, callback, opt_context) {};
< 
< /**
1900c1765
<  * @param {string|Function} replacement
---
>  * @param {string|function(string, ...?):*} replacement
