547c537
<  * @param {...*} var_args
---
>  * @param {...T} items
553c543
< function Array(var_args) {}
---
> function Array(items) {}
567,569c557,558
<  * @param {...*} var_args
<  * @return {!Array<?>}
<  * @this {*}
---
>  * @param {...T} items
>  * @return {!Array<T>}
573c562
< Array.prototype.concat = function(var_args) {};
---
> Array.prototype.concat = function(items) {};
592,594d580
<  * @this {IArrayLike<T>}
<  * @modifies {this}
<  * @template T
606,608d591
<  * @this {IArrayLike<T>}
<  * @template T
<  * @modifies {this}
617,620c600
<  * @return {THIS} A reference to the original modified array.
<  * @this {THIS}
<  * @template THIS
<  * @modifies {this}
---
>  * @return {Array<T>} A reference to the original modified array.
629,630d608
<  * @this {IArrayLike<T>}
<  * @modifies {this}
632d609
<  * @template T
640c617
<  * @param {*=} opt_begin Zero-based index at which to begin extraction.  A
---
>  * @param {number=} opt_begin Zero-based index at which to begin extraction.  A
642c619
<  * @param {*=} opt_end Zero-based index at which to end extraction.  slice
---
>  * @param {number=} opt_end Zero-based index at which to end extraction.  slice
645,646d621
<  * @this {IArrayLike<T>|string}
<  * @template T
657,659d631
<  * @this {IArrayLike<T>}
<  * @template T
<  * @modifies {this}
669c641
<  * @param {*=} opt_index Index at which to start changing the array. If negative,
---
>  * @param {number=} opt_index Index at which to start changing the array. If negative,
672c644
<  * @param {*=} opt_howMany An integer indicating the number of old array elements
---
>  * @param {number=} opt_howMany An integer indicating the number of old array elements
676,678d647
<  * @this {IArrayLike<T>}
<  * @modifies {this}
<  * @template T
703c672
<  * @param {...*} var_args
---
>  * @param {...T} var_args
718,719c687
<  * @this {IArrayLike<T>|string}
<  * @template T,R
---
>  * @template R
731,732c699
<  * @this {IArrayLike<T>|string}
<  * @template T,R
---
>  * @template R
739,740c706,707
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
742,743d708
<  * @this {IArrayLike<T>|string}
<  * @template T,S
750,751c715,716
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
753,754d717
<  * @this {IArrayLike<T>|string}
<  * @template T,S
761,764c724,725
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
<  * @this {IArrayLike<T>|string}
<  * @template T,S
---
>  * @param {?function(T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
775d735
<  * @this {IArrayLike<T>|string}
777d736
<  * @template T
787d745
<  * @this {IArrayLike<T>|string}
789d746
<  * @template T
796,797c753,754
<  * @param {?function(this:S, T, number, !Array<T>): R} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function(T, number, !Array<T>): R} callback
>  * @param {*=} opt_thisobj
799,800c756
<  * @this {IArrayLike<T>|string}
<  * @template T,S,R
---
>  * @template R
807,808c763,764
<  * @param {?function(this:S, T, number, !Array<T>): ?} callback
<  * @param {S=} opt_thisobj
---
>  * @param {?function( T, number, !Array<T>): ?} callback
>  * @param {*=} opt_thisobj
810,811d765
<  * @this {IArrayLike<T>|string}
<  * @template T,S
835,903d788
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {boolean}
<  * @template T,S
<  */
< Array.every = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {!Array<T>}
<  * @template T,S
<  */
< Array.filter = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @template T,S
<  * @return {undefined}
<  */
< Array.forEach = function(arr, callback, opt_context) {};
< 
< /**
<  * Mozilla 1.6+ only.
<  * @param {IArrayLike<T>} arr
<  * @param {T} obj
<  * @param {number=} opt_fromIndex
<  * @return {number}
<  * @template T
<  * @nosideeffects
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
<  */
< Array.indexOf = function(arr, obj, opt_fromIndex) {};
< 
< /**
<  * Mozilla 1.6+ only.
<  * @param {IArrayLike<T>} arr
<  * @param {T} obj
<  * @param {number=} opt_fromIndex
<  * @return {number}
<  * @template T
<  * @nosideeffects
<  * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf
<  */
< Array.lastIndexOf = function(arr, obj, opt_fromIndex) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, !Array<T>): R} callback
<  * @param {S=} opt_context
<  * @return {!Array<R>}
<  * @template T,S,R
<  */
< Array.map = function(arr, callback, opt_context) {};
< 
< /**
<  * @param {IArrayLike<T>} arr
<  * @param {?function(this:S, T, number, ?) : ?} callback
<  * @param {S=} opt_context
<  * @return {boolean}
<  * @template T,S
<  */
< Array.some = function(arr, callback, opt_context) {};
< 
< /**
2050c1935
<  * @param {*} pattern
---
>  * @param {string} pattern
2061c1946
<  * @param {*} str The string to search.
---
>  * @param {string} str The string to search.
2069c1954
<  * @param {*} str The string to search.
---
>  * @param {string} str The string to search.
